<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arrest Records - Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --warning-gradient: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            --dark-gradient: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .dashboard-header {
            background: var(--primary-gradient);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 0 0 50px 50px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .batch-card {
            background: white;
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            overflow: hidden;
            margin-bottom: 2rem;
        }

        .batch-card:hover {
            box-shadow: 0 25px 50px rgba(0,0,0,0.15);
        }

        .batch-header {
            background: var(--dark-gradient);
            color: white;
            padding: 1.5rem;
            position: relative;
        }

        .batch-id {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }

        .status-toggle {
            position: absolute;
            top: 50%;
            right: 1.5rem;
            transform: translateY(-50%);
        }

        .toggle-switch {
            position: relative;
            width: 80px;
            height: 40px;
            background: #ccc;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .toggle-switch.active {
            background: #28a745;
        }

        .toggle-switch.inactive {
            background: #dc3545;
        }

        .toggle-slider {
            position: absolute;
            top: 3px;
            left: 3px;
            width: 34px;
            height: 34px;
            background: white;
            border-radius: 50%;
            transition: all 0.3s ease;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }

        .toggle-switch.active .toggle-slider {
            transform: translateX(40px);
        }

        .batch-body {
            padding: 2rem;
        }

        .info-section {
            margin-bottom: 2rem;
        }

        .info-title {
            font-size: 1rem;
            font-weight: 500;
            color: #2c3e50;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .tag-container {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .tag {
            background: #f8f9fa;
            color: #495057;
            border: 2px solid #e9ecef;
            padding: 0.4rem 0.8rem;
            border-radius: 8px;
            font-size: 0.85rem;
            font-weight: 500;
            transition: all 0.2s ease;
            cursor: pointer;
        }

        .tag:hover {
            border-color: #6c757d;
            background: #ffffff;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .charge-tag {
            background: #fff3cd;
            border-color: #ffeaa7;
            color: #856404;
        }

        .charge-tag:hover {
            border-color: #f39c12;
            background: #ffffff;
        }

        .processing-info {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            margin-top: 1rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-3px);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 600;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .stat-label {
            color: #6c757d;
            font-weight: 500;
            margin-top: 0.5rem;
        }

        .search-bar {
            background: white;
            border-radius: 50px;
            padding: 0.75rem 1.5rem;
            border: none;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 400px;
            margin: 0 auto 2rem;
            display: block;
        }

        .search-bar:focus {
            outline: none;
            box-shadow: 0 10px 35px rgba(0,0,0,0.15);
        }

        .btn-custom {
            background: var(--primary-gradient);
            border: none;
            color: white;
            padding: 0.75rem 2rem;
            border-radius: 25px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-custom:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
            color: white;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 2rem;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
    <style>
        .btn-status {
    border-radius: 25px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    border: 2px solid;
    transition: all 0.3s ease;
    min-width: 80px;
}

.btn-status.active {
    background: linear-gradient(45deg, #00b894, #00a085);
    border-color: #00b894;
    color: white;
}

.btn-status.inactive {
    background: linear-gradient(45deg, #ff7675, #e84393);
    border-color: #ff7675;
    color: white;
}
    </style>
    <style>
        .dashboard-main .stats-card {
            border: none;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            position: relative;
            overflow: hidden;
            margin-bottom: 1.5rem;
        }

        .dashboard-main .stats-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }

        .dashboard-main .stats-card::after {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05));
            border-radius: 22px;
            z-index: -1;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .dashboard-main .stats-card:hover::after {
            opacity: 1;
        }

        .dashboard-main .card-total {
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            color: white;
        }

        .dashboard-main .card-completed {
            background: linear-gradient(135deg, #059669 0%, #10d876 100%);
            color: white;
        }

        .dashboard-main .card-pending {
            background: linear-gradient(135deg, #f59e0b 0%, #f97316 100%);
            color: white;
        }

        .dashboard-main .card-body {
            padding: 2rem;
            position: relative;
            z-index: 2;
        }

        .dashboard-main .card-title {
            font-size: 0.9rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
            opacity: 0.9;
            margin-bottom: 0.5rem;
        }

        .dashboard-main .card-number {
            font-size: 2.5rem;
            font-weight: 700;
            margin: 0;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .dashboard-main .card-icon {
            font-size: 3rem;
            opacity: 0.2;
            position: absolute;
            right: 1.5rem;
            top: 50%;
            transform: translateY(-50%);
        }

        .dashboard-main .card-percentage {
            font-size: 0.85rem;
            margin-top: 0.5rem;
            opacity: 0.9;
        }

        .dashboard-main .percentage-bar {
            height: 4px;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 2px;
            overflow: hidden;
            margin-top: 0.5rem;
        }

        .dashboard-main .percentage-fill {
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 2px;
            transition: width 2s ease-in-out;
        }

        .dashboard-main .dashboard-title {
            color: white;
            text-align: center;
            margin-bottom: 3rem;
            font-weight: 300;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        @keyframes countUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .dashboard-main .stats-card {
            animation: countUp 0.6s ease-out forwards;
        }

        .dashboard-main .stats-card:nth-child(1) { animation-delay: 0.1s; }
        .dashboard-main .stats-card:nth-child(2) { animation-delay: 0.2s; }
        .dashboard-main .stats-card:nth-child(3) { animation-delay: 0.3s; }

        .dashboard-main .card-script {
            background: linear-gradient(135deg, #0891b2 0%, #06b6d4 100%);
            color: white;
        }

        .dashboard-main .card-script.stopped {
            background: linear-gradient(135deg, #e11d48 0%, #f43f5e 100%);
            color: white;
        }

        .dashboard-main .status-container {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0;
        }

        .dashboard-main .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            animation: pulse 2s infinite;
            flex-shrink: 0;
            display: inline-block;
            margin-right: 8px;
        }

        .dashboard-main .status-indicator.running {
            background: rgba(255, 255, 255, 0.9);
            box-shadow: 0 0 8px rgba(255, 255, 255, 0.5);
        }

        .dashboard-main .status-indicator.stopped {
            background: rgba(255, 255, 255, 0.9);
            box-shadow: 0 0 8px rgba(255, 255, 255, 0.5);
            animation: none;
        }

        .dashboard-main .toggle-btn {
            border: 1px solid rgba(255, 255, 255, 0.3);
            background: rgba(255, 255, 255, 0.1);
            color: white;
            padding: 0.4rem 0.8rem;
            border-radius: 6px;
            font-size: 0.85rem;
            font-weight: 500;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .dashboard-main .toggle-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.5);
            color: white;
            transform: translateY(-1px);
        }

        .dashboard-main .toggle-btn:active {
            transform: translateY(0);
        }

        .dashboard-main .toggle-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .dashboard-main .toggle-btn:disabled:hover {
            background: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.3);
            transform: none;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-2px); }
            75% { transform: translateX(2px); }
        }

        .dashboard-main .shake {
            animation: shake 0.5s ease-in-out;
        }

        .dashboard-main .script-control-card {
            transition: all 0.5s ease;
        }

        .dashboard-main .script-control-card.card-script {
            background: linear-gradient(135deg, #0891b2 0%, #06b6d4 100%);
            color: white;
        }

        .dashboard-main .script-control-card.card-script.stopped {
            background: linear-gradient(135deg, #e11d48 0%, #f43f5e 100%);
            color: white;
        }
    </style>
    <style>
        .configuration .form-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 600px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .configuration .form-title {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 28px;
            font-weight: 600;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .configuration .form-group {
            margin-bottom: 25px;
        }

        .configuration .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .configuration .form-input {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e1e5e9;
            border-radius: 12px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: white;
        }

        .configuration .form-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-1px);
        }

        .configuration .time-help {
            font-size: 12px;
            color: #666;
            margin-top: 5px;
            line-height: 1.4;
        }

        .configuration .repeater-section {
            border: 2px dashed #e1e5e9;
            border-radius: 12px;
            padding: 20px;
            background: rgba(102, 126, 234, 0.02);
        }

        .configuration .repeater-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 20px;
        }

        .configuration .name-field-group {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            align-items: center;
            background: white;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid #e1e5e9;
            transition: all 0.3s ease;
        }

        .configuration .name-field-group:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transform: translateY(-1px);
        }

        .configuration .name-input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
        }

        .configuration .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .configuration .btn-add {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            margin-bottom: 15px;
        }

        .configuration .btn-add:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
        }

        .configuration .btn-remove {
            background: linear-gradient(135deg, #f44336, #d32f2f);
            color: white;
            padding: 8px 12px;
            font-size: 12px;
        }

        .configuration .btn-remove:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(244, 67, 54, 0.3);
        }

        .configuration .form-actions {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .configuration .btn-cancel {
            background: linear-gradient(135deg, #6c757d, #5a6268);
            color: white;
            flex: 1;
            padding: 15px;
            font-size: 16px;
        }

        .configuration .btn-cancel:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(108, 117, 125, 0.3);
        }

        .configuration .btn-submit {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            flex: 2;
            padding: 15px;
            font-size: 16px;
        }

        .configuration .btn-submit:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
        }

        .configuration .field-number {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            flex-shrink: 0;
        }

        .configuration .empty-state {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 20px;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .configuration .name-field-group {
            animation: slideIn 0.3s ease;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-shield-alt"></i> Arrest Records System
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link <%= currentPage === 'dashboard' ? 'active' : '' %>" href="/">
                    <i class="fas fa-chart-dashboard"></i> Dashboard
                </a>
                <a class="nav-link <%= currentPage === 'records' ? 'active' : '' %>" href="/records">
                    <i class="fas fa-table"></i> Records
                </a>
                <a class="nav-link <%= currentPage === 'settings' ? 'active' : '' %>" href="/settings">
                    <i class="fas fa-cog"></i> Settings
                </a>
            </div>
        </div>
    </nav>

    <div class="dashboard-main container mt-4">
        <div class="row">
            <div class="col-lg-3 col-md-6">
                <div class="card stats-card card-total">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h5 class="card-title">Total Records</h5>
                                <h2 class="card-number" id="totalRecords">0</h2>
                                <div class="card-percentage">
                                    <small>Database entries</small>
                                </div>
                                <div class="percentage-bar">
                                    <div class="percentage-fill" style="width: 100%"></div>
                                </div>
                            </div>
                        </div>
                        <i class="fas fa-database card-icon"></i>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-3 col-md-6">
                <div class="card stats-card card-completed">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h5 class="card-title">Completed Records</h5>
                                <h2 class="card-number" id="completedRecords">0</h2>
                                <div class="card-percentage">
                                    <small><span id="completedPercentage">0</span>% completion rate</small>
                                </div>
                                <div class="percentage-bar">
                                    <div class="percentage-fill" id="completedBar" style="width: 0%"></div>
                                </div>
                            </div>
                        </div>
                        <i class="fas fa-check-circle card-icon"></i>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-3 col-md-6">
                <div class="card stats-card card-pending">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h5 class="card-title">Pending Records</h5>
                                <h2 class="card-number" id="pendingRecords">0</h2>
                                <div class="card-percentage">
                                    <small><span id="pendingPercentage">0</span>% remaining</small>
                                </div>
                                <div class="percentage-bar">
                                    <div class="percentage-fill" id="pendingBar" style="width: 0%"></div>
                                </div>
                            </div>
                        </div>
                        <i class="fas fa-clock card-icon"></i>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6">
                <div class="card stats-card script-control-card" id="scriptCard">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h5 class="card-title"><div class="status-indicator" id="statusIndicator"></div>Script <span id="statusText">Running</span></h5>
                                <h2 class="card-number"><button class="btn toggle-btn mb-2" id="toggleBtn" onclick="toggleScript()">
                                    <i class="fas fa-stop me-1"></i>
                                    <span id="btnText">Stop</span>
                                </button></h2>
                                <div class="card-percentage">
                                    <small class="last-updated" id="lastUpdated">Last updated: Just now</small>
                                </div>
                                <div class="percentage-bar">
                                    <div class="percentage-fill" style="width: 0%"></div>
                                </div>
                            </div>
                        </div>
                        <i class="fas fa-code card-icon"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Search and Controls -->
        <div class="row mb-4">
            <div class="col-md-6 text-start">
                <button class="btn btn-custom" onclick="showConfigurationModal()">
                    <i class="fas fa-cog me-2"></i>Configuration
                </button>
            </div>
            <div class="col-md-6 text-end">
                <button class="btn btn-custom me-2" onclick="loadBatches()">
                    <i class="fas fa-sync-alt me-2"></i>Refresh
                </button>
                <button class="btn btn-custom" onclick="showAddBatchModal()">
                    <i class="fas fa-plus me-2"></i>Add Batch
                </button>
            </div>
        </div>

        <!-- Statistics -->
        <div class="stats-grid mb-5" id="statsContainer">
            <!-- Stats will be loaded here -->
        </div>

        <!-- Loading Spinner -->
        <div class="loading" id="loading">
            <div class="spinner"></div>
            <h5>Loading batches...</h5>
        </div>

        <!-- Batch Container -->
        <div id="batchContainer">
            <!-- Batches will be loaded here -->
        </div>
    </div>

    <!-- Add Batch Modal -->
    <div class="modal fade" id="addBatchModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Batch</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addBatchForm">
                        <div class="mb-3">
                            <label class="form-label">Batch Schedule</label>
                            <div class="d-flex gap-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="scheduleType" id="dateRange" value="dateRange" checked onchange="toggleScheduleFields()">
                                    <label class="form-check-label" for="dateRange">
                                        Date Range
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="scheduleType" id="everyday" value="everyday" onchange="toggleScheduleFields()">
                                    <label class="form-check-label" for="everyday">
                                        Everyday
                                    </label>
                                </div>
                            </div>
                        </div>
                        
                        <div id="dateFields">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Start Date</label>
                                    <input type="date" onchange="validateDates()" class="form-control" name="start_time" id="startDate" required>
                                    <div class="invalid-feedback" id="startDateError"></div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">End Date</label>
                                    <input type="date" onchange="validateDates()" class="form-control" name="end_time" id="endDate" required>
                                    <div class="invalid-feedback" id="endDateError"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="info-section state-section">
                                        <div class="info-title">
                                            <i class="fas fa-map-marker-alt"></i>
                                            Active States (<span></span>)
                                        </div>
                                        <div class="tag-container state-tags"></div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="info-section charge-section">
                                        <div class="info-title">
                                            <i class="fas fa-bolt"></i>
                                            Active Charges (<span></span>)
                                        </div>
                                        <div class="tag-container charge-tags"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div>
                            <small class="form-text text-muted">
                                Batch will be created for Active States & Active Charges only.
                            </small>
                        </div>
                        <div>
                            <small class="form-text text-muted">
                                Script will run according to state priority.
                            </small>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-custom" onclick="addBatch()">Add Batch</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Batch Modal -->
    <div class="modal fade" id="configurationModal" tabindex="-1">
        <div class="modal-dialog modal-lg" style="max-width: 600px;">
            <div class="modal-content">
                <div class="configuration">
                    <div class="form-container">
                        <h1 class="form-title">Schedule Configuration</h1>
                        
                        <form id="cronForm">
                            <!-- Time Field -->
                            <div class="form-group">
                                <label for="scheduleTime" class="form-label">Schedule Cron Time</label>
                                <input 
                                    type="time" 
                                    id="scheduleTime" 
                                    name="scheduleTime" 
                                    class="form-input"
                                    value="00:00"
                                    required
                                >
                                <div class="time-help">
                                    Select the time when the schedule should run daily
                                </div>
                                <input type="hidden" id="cronSchedule" name="cronSchedule" value="30 10 * * *">
                            </div>
                
                            <!-- Name Fields Repeater -->
                            <div class="form-group">
                                <label class="form-label">FTA Fields</label>
                                <div class="repeater-section">
                                    <div class="repeater-header">
                                        <button type="button" class="btn btn-add" onclick="addNameField()">
                                            + Add FTA Field
                                        </button>
                                    </div>
                                    
                                    <div id="nameFields">
                                        <div class="empty-state" id="emptyState">
                                            No FTA fields added yet. Click "Add Fta Field" to get started.
                                        </div>
                                    </div>
                                </div>
                            </div>
                
                            <div class="form-actions">
                                <button type="button" class="btn btn-cancel" onclick="cancelConfigurationForm()">
                                    Cancel
                                </button>
                                <button type="submit" class="btn btn-submit">
                                    Save Configuration
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    const allStates = [];
    const allCharges = [];
    const activeCharges = [];
    const activeStates = [];
    // Script state management
    const scriptState = {
        isRunning: `<%= scriptRunFlag %>` === 'true',
        lastToggleTime: Date.now(),
        autoUpdateInterval: null,
        lastUpdate: Date.now()
    };

    $(document).ready(() => {
        refreshStats();
        updateScriptCardState(scriptState.isRunning);
        scriptState.autoUpdateInterval = setInterval(() => {
            document.getElementById('lastUpdated').textContent = `Last updated: ${formatTimeAgo(scriptState.lastUpdate)}`;
        }, 1000);
        $.get('/api/charges').done(data => {
            data.forEach(charge => {
                allCharges.push(charge);
                if(charge.status == 1){
                    activeCharges.push(charge);
                }
            });
            $('.charge-section .info-title span').html(activeCharges.length);
            $('.charge-section .charge-tags').html(activeCharges.map(charge => `<span class="tag charge-tag">${charge.name}</span>`).join(''));
            
        });
        $.get('/api/states').done(data => {
            data.forEach(state => {
                allStates.push(state);
                if(state.status == 1){
                    activeStates.push(state);
                }
            });
            $('.state-section .info-title span').html(activeStates.length);
            $('.state-section .state-tags').html(activeStates.map(state => `<span class="tag">${state.name}</span>`).join(''));
        });
        loadBatches();
    });
    
    function loadStats() {
        $.get('/api/batches/stats').done(data => {
            const statsContainer = document.getElementById('statsContainer');
            statsContainer.innerHTML = `
                <div class="stat-card fade-in">
                    <div class="stat-number">${data.total_batches}</div>
                    <div class="stat-label">Total Batches</div>
                </div>
                <div class="stat-card fade-in">
                    <div class="stat-number">${data.status_breakdown.active}</div>
                    <div class="stat-label">Active Batches</div>
                </div>
                <div class="stat-card fade-in">
                    <div class="stat-number">${data.script_status_breakdown.processing}</div>
                    <div class="stat-label">Processing</div>
                </div>
                <div class="stat-card fade-in">
                    <div class="stat-number">${data.script_status_breakdown.completed}</div>
                    <div class="stat-label">Completed</div>
                </div>
            `;
        });
    }

    function loadBatches() {
        loadStats();
        const loading = document.getElementById('loading');
        const container = document.getElementById('batchContainer');
        
        loading.style.display = 'block';
        container.innerHTML = '';
        const batches = [];

        $.get('/api/batches').done(data => {
            data.data.forEach(batch => {
                const charges = JSON.parse(batch.charges);
                const states = JSON.parse(batch.states);
                batches.push({
                    id: batch.id,
                    start_time: batch.start_time,
                    end_time: batch.end_time,
                    charges: allCharges.filter(charge => charges.includes(charge.id)).map(charge => ({name: charge.name, id: charge.id})),
                    states: allStates.filter(state => states.includes(state.id)).map(state => ({name: state.name, id: state.id})),
                    status: batch.status,
                    total_records: batch.total_records,
                    script_status: batch.script_status,
                    processing_charge_id: batch.processing_charge_id,
                    processing_state_id: batch.processing_state_id,
                    processing_date: batch.processing_date,
                    worker_id: batch.worker_id,
                    schedule_type: batch.start_time == ''? 'everyday' : 'dateRange'
                });
            });
            loading.style.display = 'none';
            renderBatches(batches);
        });
    }

    function renderBatches(batches) {
        const container = document.getElementById('batchContainer');
        container.innerHTML = '';

        batches.forEach((batch, index) => {
            const charges = batch.charges;
            const states = batch.states;

            const batchCard = document.createElement('div');
            batchCard.className = 'batch-card fade-in';
            batchCard.style.animationDelay = `${index * 0.1}s`;
            
            batchCard.innerHTML = `
                <div class="batch-header">
                    <h2 class="batch-id">Batch #${batch.id}</h2>
                    ${(batch.schedule_type == 'dateRange' && batch.script_status == 'completed') ? `` : `
                    <div class="status-toggle">
                        <div class="toggle-switch ${batch.status}" onclick="toggleStatus(${batch.id}, '${batch.status}')">
                            <div class="toggle-slider"></div>
                        </div>
                    </div>
                    `}
                </div>
                <div class="batch-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="info-section">
                                <div class="info-title">
                                    <i class="fas fa-map-marker-alt"></i>
                                    States (${states.length})
                                </div>
                                <div class="tag-container">
                                    ${states.map(state => `<span class="tag">${state.name}</span>`).join('')}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-section">
                                <div class="info-title">
                                    <i class="fas fa-bolt"></i>
                                    Charges (${charges.length})
                                </div>
                                <div class="tag-container">
                                    ${charges.map(charge => `<span class="tag charge-tag">${charge.name}</span>`).join('')}
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    ${batch.processing_charge_id || batch.processing_state_id ? `
                    <div class="processing-info">
                        <div class="row">
                            <div class="col-md-4">
                                <strong><i class="fas fa-cog me-2"></i>Processing Charge:</strong><br>
                                ${batch.processing_charge_id ? (charges.find(item => item.id === batch.processing_charge_id))?.name || 'Unknown' : 'None'}
                            </div>
                            <div class="col-md-4">
                                <strong><i class="fas fa-location-arrow me-2"></i>Processing State:</strong><br>
                                ${batch.processing_state_id ? (states.find(item => item.id === batch.processing_state_id))?.name || 'Unknown' : 'None'}
                            </div>
                            <div class="col-md-4">
                                <strong><i class="fa fa-calendar me-2"></i>Processing Date:</strong><br>
                                ${batch.processing_date ? new Date(batch.processing_date).toLocaleDateString() : 'Unknown'}
                            </div>
                        </div>
                    </div>
                    ` : ''}
                    
                    <div class="row mt-3">
                        <div class="col-md-3">
                            <strong>Schedule:</strong><br>
                            <span class="badge bg-info">${batch.schedule_type === 'everyday' ? 'EVERYDAY' : 'DATE RANGE'}</span>
                        </div>
                        <div class="col-md-3">
                            <strong>Script Status:</strong><br>
                            <span class="badge bg-${getStatusColor(batch.script_status)}">${batch.script_status.toUpperCase()}</span>
                        </div>
                        <div class="col-md-3">
                            <strong>Total Records:</strong><br>
                            <span class="text-primary fw-bold">${batch.total_records}</span>
                        </div>
                        <div class="col-md-3">
                            <strong>${batch.schedule_type === 'everyday' ? 'Last Run Date' : 'Date Range'}:</strong><br>
                            ${batch.schedule_type === 'everyday' ? `${batch.end_time ? new Date(batch.end_time).toLocaleDateString() : ''}` : `${batch.start_time ? new Date(batch.start_time).toLocaleDateString() : ''} ${batch.end_time ? `- ${new Date(batch.end_time).toLocaleDateString()}` : ''}`}
                        </div>
                    </div>
                    

                </div>
            `;
            
            container.appendChild(batchCard);
        });
    }

    function getStatusColor(status) {
        switch(status) {
            case 'completed': return 'success';
            case 'processing': return 'warning';
            case 'pending': return 'secondary';
            default: return 'primary';
        }
    }

    function toggleStatus(batchId, currentStatus) {
        const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
        const target = event.target;

        $.ajax({
            url: `/api/batches/${batchId}`,
            type: 'PUT',
            data: { status: newStatus }
        }).done(data => {
            if(data.error){
                showToast(data.error, 'danger');
            } else {
                const toggle = target.classList.contains('toggle-switch') ? target : target.parentElement;
                toggle.className = `toggle-switch ${newStatus}`;
                $(toggle).attr('onclick', `toggleStatus(${batchId}, '${newStatus}')`);
                showToast(`Batch #${batchId} status changed to ${newStatus}`, 'success');
            }
        }).fail(err => {
            showToast(err.message, 'danger');
        });;
    }

    function showAddBatchModal() {
        const modal = new bootstrap.Modal(document.getElementById('addBatchModal'));
        modal.show();
    }
    function showConfigurationModal() {
        const modal = new bootstrap.Modal(document.getElementById('configurationModal'));
        modal.show();
    }

    function addBatch() {
        const form = document.getElementById('addBatchForm');
        
        // Validate dates before proceeding
        if (!validateDates()) {
            return;
        }
        
        const formData = new FormData(form);
        const scheduleType = formData.get('scheduleType');
        
        // Convert form data to object
        const newBatch = {
            start_time: scheduleType === 'everyday' ? '' : formData.get('start_time'),
            end_time: scheduleType === 'everyday' ? '' : formData.get('end_time'),
            charges: JSON.stringify(activeCharges.map(item => item.id)), // Default charges
            states: JSON.stringify(activeStates.map(item => item.id)),
        };
        debugger;
        $.post('/api/batches', newBatch).done(data => {
            loadBatches();
            // Close modal and reset form
            bootstrap.Modal.getInstance(document.getElementById('addBatchModal')).hide();
            form.reset();
            
            // Reset to default state (date range)
            document.getElementById('dateRange').checked = true;
            toggleScheduleFields();
            
            const scheduleText = scheduleType === 'everyday' ? 'everyday schedule' : 'date range';
            showToast(`New batch with ${scheduleText} added successfully!`, 'success');
        });
    }

    function toggleScheduleFields() {
        const dateFields = document.getElementById('dateFields');
        const scheduleType = document.querySelector('input[name="scheduleType"]:checked').value;
        
        if (scheduleType === 'everyday') {
            dateFields.style.display = 'none';
            // Remove required attribute when hidden
            document.getElementById('startDate').removeAttribute('required');
            document.getElementById('endDate').removeAttribute('required');
        } else {
            dateFields.style.display = 'block';
            // Add required attribute when visible
            document.getElementById('startDate').setAttribute('required', 'required');
            document.getElementById('endDate').setAttribute('required', 'required');
        }
        
        // Clear any previous validation errors
        clearValidationErrors();
    }

    function validateDates() {
        const startDate = document.getElementById('startDate');
        const endDate = document.getElementById('endDate');
        const startDateError = document.getElementById('startDateError');
        const endDateError = document.getElementById('endDateError');
        const scheduleType = document.querySelector('input[name="scheduleType"]:checked').value;
        
        // Clear previous errors
        clearValidationErrors();
        
        // Skip validation for everyday option
        if (scheduleType === 'everyday') {
            return true;
        }
        
        const today = new Date();
        today.setHours(0, 0, 0, 0); // Set to start of day
        
        const startDateValue = new Date(startDate.value);
        const endDateValue = new Date(endDate.value);
        
        let isValid = true;
        
        // Check if start date is provided
        if (!startDate.value) {
            showFieldError(startDate, startDateError, 'Start date is required');
            isValid = false;
        }
        
        // Check if end date is provided
        if (!endDate.value) {
            showFieldError(endDate, endDateError, 'End date is required');
            isValid = false;
        }
        
        if (startDate.value && endDate.value) {
            // Check if start date is older than end date
            if (startDateValue >= endDateValue) {
                showFieldError(startDate, startDateError, 'Start date must be earlier than end date');
                isValid = false;
            }
            
            // Check if end date is less than today
            if (endDateValue >= today) {
                showFieldError(endDate, endDateError, 'End date must be before today');
                isValid = false;
            }
        }
        
        return isValid;
    }

    function showFieldError(field, errorElement, message) {
        field.classList.add('is-invalid');
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }

    function clearValidationErrors() {
        const fields = ['startDate', 'endDate'];
        const errors = ['startDateError', 'endDateError'];
        
        fields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            field.classList.remove('is-invalid');
        });
        
        errors.forEach(errorId => {
            const error = document.getElementById(errorId);
            error.textContent = '';
            error.style.display = 'none';
        });
    }

    function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `alert alert-${type} position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'} me-2"></i>
                ${message}
            </div>
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    /*
    $('#toggleBtn').click(function() {
        const btn = $(this);
        $.get('/toggle-script-flag').done(data => {
            if(data.flag){
                btn.data('status', 'started');
                btn.html('<i class="fas fa-play"></i> Running');
                btn.removeClass('inactive').addClass('active');
            } else {
                btn.data('status', 'stopped');
                btn.html('<i class="fas fa-stop"></i> Stopped');
                btn.removeClass('active').addClass('inactive');
            }
        }).fail(err => {});
        if (btn.data('status') === 'started') {
        } else {
        }
    });
    */

    // Animation function to animate numbers (both increasing and decreasing)
    function animateNumber(element, start, end, duration) {
        const range = end - start;
        const increment = range / (duration / 16);
        const isIncreasing = end > start;
        let current = start;
        
        const timer = setInterval(() => {
            current += increment;
            
            // Check if animation should stop based on direction
            if (isIncreasing && current >= end) {
                current = end;
                clearInterval(timer);
            } else if (!isIncreasing && current <= end) {
                current = end;
                clearInterval(timer);
            }
            
            element.textContent = formatNumber(Math.floor(current));
        }, 16);
    }
    // Refresh stats function
    async function refreshStats() {
        try {
            const response = await fetch('/api/stats');
            const data = await response.json();
            scriptState.lastUpdate = Date.now();

            const dashboardData = {
                previous: {
                    totalRecords: parseFormattedNumber(document.getElementById('totalRecords').textContent),
                    completedRecords: parseFormattedNumber(document.getElementById('completedRecords').textContent),
                    pendingRecords: parseFormattedNumber(document.getElementById('pendingRecords').textContent)
                },
                current: {
                    totalRecords: data.totalRecords,
                    completedRecords: data.completedRecords,
                    pendingRecords: data.pendingRecords
                }
            };

            const { previous, current } = dashboardData;
            // Calculate current percentages
            let completedPercentage = Math.round((current.completedRecords / current.totalRecords) * 100);
            let pendingPercentage = Math.round((current.pendingRecords / current.totalRecords) * 100);

            // Calculate previous percentages for smooth transition
            let prevCompletedPercentage = Math.round((previous.completedRecords / previous.totalRecords) * 100);
            let prevPendingPercentage = Math.round((previous.pendingRecords / previous.totalRecords) * 100);
            completedPercentage = isNaN(completedPercentage) ? 100 : completedPercentage;
            pendingPercentage = isNaN(pendingPercentage) ? 100 : pendingPercentage;
            prevCompletedPercentage = isNaN(prevCompletedPercentage) ? 100 : prevCompletedPercentage;
            prevPendingPercentage = isNaN(prevPendingPercentage) ? 100 : prevPendingPercentage;
             // Animate to new values after delay
             setTimeout(() => {
                // Animate numbers from previous to current
                animateNumber(document.getElementById('totalRecords'), previous.totalRecords, current.totalRecords, 2000);
                animateNumber(document.getElementById('completedRecords'), previous.completedRecords, current.completedRecords, 2000);
                animateNumber(document.getElementById('pendingRecords'), previous.pendingRecords, current.pendingRecords, 2000);
                
                // Animate percentages
                animateNumber(document.getElementById('completedPercentage'), prevCompletedPercentage, completedPercentage, 2000);
                animateNumber(document.getElementById('pendingPercentage'), prevPendingPercentage, pendingPercentage, 2000);
                
                // Animate progress bars
                setTimeout(() => {
                    document.getElementById('completedBar').style.width = completedPercentage + '%';
                    document.getElementById('pendingBar').style.width = pendingPercentage + '%';
                }, 500);
            }, 600);
        } catch (error) {
            console.error('Error refreshing stats:', error);
        }
        loadStats();
    }

    // Auto-refresh stats every 30 seconds
    setInterval(refreshStats, 60 * 1000 * 3);

    // Update script card visual state
    function updateScriptCardState(isRunning) {
        const scriptCard = document.getElementById('scriptCard');
        const statusIndicator = document.getElementById('statusIndicator');
        const statusText = document.getElementById('statusText');
        const toggleBtn = document.getElementById('toggleBtn');
        const btnText = document.getElementById('btnText');
        const btnIcon = toggleBtn.querySelector('i');
        
        if (isRunning) {
            // Running state
            scriptCard.className = 'card stats-card script-control-card card-script';
            statusIndicator.className = 'status-indicator running';
            statusText.textContent = 'Running';
            btnIcon.className = 'fas fa-stop me-1';
            btnText.textContent = 'Stop';
        } else {
            // Stopped state
            scriptCard.className = 'card stats-card script-control-card card-script stopped';
            statusIndicator.className = 'status-indicator stopped';
            statusText.textContent = 'Stopped';
            btnIcon.className = 'fas fa-play me-1';
            btnText.textContent = 'Start';
        }
    }
    
    // Toggle script function
    function toggleScript() {
        const toggleBtn = document.getElementById('toggleBtn');
        
        // Prevent rapid clicking
        const now = Date.now();
        if (now - scriptState.lastToggleTime < 1000) {
            // Add shake animation for rapid clicks
            toggleBtn.classList.add('shake');
            setTimeout(() => toggleBtn.classList.remove('shake'), 500);
            return;
        }
        
        // Disable button temporarily
        toggleBtn.disabled = true;

        $.get('/toggle-script-flag').done(data => {
            // Toggle state
            scriptState.isRunning = data.flag;
            scriptState.lastToggleTime = new Date();
            setTimeout(() => {
                updateScriptCardState(scriptState.isRunning);
                // Re-enable button
                toggleBtn.disabled = false;
                // Show feedback
                showToggleFeedback(scriptState.isRunning);
            }, 300);
        }).fail(err => {});
    }
    
    // Show toggle feedback
    function showToggleFeedback(isRunning) {
        const statusText = document.getElementById('statusText');
        const originalText = statusText.textContent;
        
        // Briefly show action feedback
        statusText.textContent = isRunning ? 'Starting...' : 'Stopping...';
        
        setTimeout(() => {
            statusText.textContent = originalText;
        }, 1000);
    }

    // Format numbers with K/M suffixes - maximum 5-6 digits
    function formatNumber(num) {
        if (num >= 1000000000) {
            // For billions
            const billions = num / 1000000000;
            if (billions >= 1000) {
                // For trillions, show as 1.234T
                const trillions = billions / 1000;
                return trillions.toFixed(3).replace(/\.?0+$/, '') + 'T';
            } else if (billions >= 100) {
                // For 100B+, show as 123.45B (5-6 digits)
                return billions.toFixed(2).replace(/\.?0+$/, '') + 'B';
            } else if (billions >= 10) {
                // For 10B-99.9B, show as 12.345B (5-6 digits)
                return billions.toFixed(3).replace(/\.?0+$/, '') + 'B';
            } else {
                // For 1B-9.99B, show as 1.2345B (5-6 digits)
                return billions.toFixed(4).replace(/\.?0+$/, '') + 'B';
            }
        } else if (num >= 1000000) {
            // For millions
            const millions = num / 1000000;
            if (millions >= 100) {
                // For 100M+, show as 123.45M (5-6 digits)
                return millions.toFixed(2).replace(/\.?0+$/, '') + 'M';
            } else if (millions >= 10) {
                // For 10M-99.9M, show as 12.345M (5-6 digits)
                return millions.toFixed(3).replace(/\.?0+$/, '') + 'M';
            } else {
                // For 1M-9.99M, show as 1.2345M (5-6 digits)
                return millions.toFixed(4).replace(/\.?0+$/, '') + 'M';
            }
        } else if (num >= 100000) {
            // For 100K-999K, show as 123.45K (5-6 digits)
            const thousands = num / 1000;
            return thousands.toFixed(2).replace(/\.?0+$/, '') + 'K';
        } else if (num >= 10000) {
            // For 10K-99.9K, show as 12.345K (5-6 digits)
            const thousands = num / 1000;
            return thousands.toFixed(3).replace(/\.?0+$/, '') + 'K';
        } else {
            // For numbers < 1000, show as-is with commas
            return num.toLocaleString();
        }
    }

    // Format time ago
    function formatTimeAgo(timestamp) {
        const now = Date.now();
        const diff = now - timestamp;
        const seconds = Math.floor(diff / 1000);
        const minutes = Math.floor(diff / (1000 * 60));
        
        if (minutes < 1) {
            if(seconds < 2){
                return 'Just now';
            } else {
                return `${seconds} seconds ago`;
            }
        }
        if (minutes === 1) return '1 minute ago';
        if (minutes < 60) return `${minutes} minutes ago`;
        
        const hours = Math.floor(minutes / 60);
        if (hours === 1) return '1 hour ago';
        if (hours < 24) return `${hours} hours ago`;
        
        const days = Math.floor(hours / 24);
        if (days === 1) return '1 day ago';
        return `${days} days ago`;
    }

    // Parse formatted numbers back to integers
    function parseFormattedNumber(formattedStr) {
        if (formattedStr.includes('T')) {
            return parseFloat(formattedStr.replace('T', '')) * 1000000000000;
        } else if (formattedStr.includes('B')) {
            return parseFloat(formattedStr.replace('B', '')) * 1000000000;
        } else if (formattedStr.includes('M')) {
            return parseFloat(formattedStr.replace('M', '')) * 1000000;
        } else if (formattedStr.includes('K')) {
            return parseFloat(formattedStr.replace('K', '')) * 1000;
        } else {
            return parseInt(formattedStr.replace(/,/g, ''));
        }
    }
    
    // Cleanup intervals when page unloads
    window.addEventListener('beforeunload', function() {
        if (scriptState.autoUpdateInterval) {
            clearInterval(scriptState.autoUpdateInterval);
        }
    });

</script>
<script src="/configuration.js"></script>
</body>
</html>