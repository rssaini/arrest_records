<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arrest Records - Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --warning-gradient: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            --dark-gradient: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .dashboard-header {
            background: var(--primary-gradient);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 0 0 50px 50px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .batch-card {
            background: white;
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            overflow: hidden;
            margin-bottom: 2rem;
        }

        .batch-card:hover {
            box-shadow: 0 25px 50px rgba(0,0,0,0.15);
        }

        .batch-header {
            background: var(--dark-gradient);
            color: white;
            padding: 1.5rem;
            position: relative;
        }

        .batch-id {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }

        .status-toggle {
            position: absolute;
            top: 50%;
            right: 1.5rem;
            transform: translateY(-50%);
        }

        .toggle-switch {
            position: relative;
            width: 80px;
            height: 40px;
            background: #ccc;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .toggle-switch.active {
            background: #28a745;
        }

        .toggle-switch.inactive {
            background: #dc3545;
        }

        .toggle-slider {
            position: absolute;
            top: 3px;
            left: 3px;
            width: 34px;
            height: 34px;
            background: white;
            border-radius: 50%;
            transition: all 0.3s ease;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }

        .toggle-switch.active .toggle-slider {
            transform: translateX(40px);
        }

        .batch-body {
            padding: 2rem;
        }

        .info-section {
            margin-bottom: 2rem;
        }

        .info-title {
            font-size: 1rem;
            font-weight: 500;
            color: #2c3e50;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .tag-container {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .tag {
            background: #f8f9fa;
            color: #495057;
            border: 2px solid #e9ecef;
            padding: 0.4rem 0.8rem;
            border-radius: 8px;
            font-size: 0.85rem;
            font-weight: 500;
            transition: all 0.2s ease;
            cursor: pointer;
        }

        .tag:hover {
            border-color: #6c757d;
            background: #ffffff;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .charge-tag {
            background: #fff3cd;
            border-color: #ffeaa7;
            color: #856404;
        }

        .charge-tag:hover {
            border-color: #f39c12;
            background: #ffffff;
        }

        .processing-info {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            margin-top: 1rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-3px);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 600;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .stat-label {
            color: #6c757d;
            font-weight: 500;
            margin-top: 0.5rem;
        }

        .search-bar {
            background: white;
            border-radius: 50px;
            padding: 0.75rem 1.5rem;
            border: none;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 400px;
            margin: 0 auto 2rem;
            display: block;
        }

        .search-bar:focus {
            outline: none;
            box-shadow: 0 10px 35px rgba(0,0,0,0.15);
        }

        .btn-custom {
            background: var(--primary-gradient);
            border: none;
            color: white;
            padding: 0.75rem 2rem;
            border-radius: 25px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-custom:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
            color: white;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 2rem;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
    <style>
        .btn-status {
    border-radius: 25px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    border: 2px solid;
    transition: all 0.3s ease;
    min-width: 80px;
}

.btn-status.active {
    background: linear-gradient(45deg, #00b894, #00a085);
    border-color: #00b894;
    color: white;
}

.btn-status.inactive {
    background: linear-gradient(45deg, #ff7675, #e84393);
    border-color: #ff7675;
    color: white;
}
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-shield-alt"></i> Arrest Records System
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link <%= currentPage === 'dashboard' ? 'active' : '' %>" href="/">
                    <i class="fas fa-chart-dashboard"></i> Dashboard
                </a>
                <a class="nav-link <%= currentPage === 'records' ? 'active' : '' %>" href="/records">
                    <i class="fas fa-table"></i> Records
                </a>
                <a class="nav-link <%= currentPage === 'settings' ? 'active' : '' %>" href="/settings">
                    <i class="fas fa-cog"></i> Settings
                </a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <!-- Stats Cards -->
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card bg-primary text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h5 class="card-title">Total Records</h5>
                                <h2 id="totalRecords"><%= totalRecords.toLocaleString() %></h2>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-database fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-info-circle"></i> System Info
                        </h5>
                    </div>
                    <div class="card-body">
                        <p><strong>Database:</strong> SQLite</p>
                        <p><strong>Last Update:</strong> <span id="lastUpdate"><%= new Date().toLocaleString() %></span></p>
                        <p><strong>Script Status:</strong> <button data-status="stopped" id="toggleBtn" class="btn btn-status inactive"><i class="fas fa-stop"></i> Stopped</button></p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Search and Controls -->
        <div class="row mb-4">
            <div class="col-md-6 text-end"></div>
            <div class="col-md-6 text-end">
                <button class="btn btn-custom me-2" onclick="loadBatches()">
                    <i class="fas fa-sync-alt me-2"></i>Refresh
                </button>
                <button class="btn btn-custom" onclick="showAddBatchModal()">
                    <i class="fas fa-plus me-2"></i>Add Batch
                </button>
            </div>
        </div>

        <!-- Statistics -->
        <div class="stats-grid mb-5" id="statsContainer">
            <!-- Stats will be loaded here -->
        </div>

        <!-- Loading Spinner -->
        <div class="loading" id="loading">
            <div class="spinner"></div>
            <h5>Loading batches...</h5>
        </div>

        <!-- Batch Container -->
        <div id="batchContainer">
            <!-- Batches will be loaded here -->
        </div>
    </div>

    <!-- Add Batch Modal -->
    <div class="modal fade" id="addBatchModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Batch</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addBatchForm">
                        <div class="mb-3">
                            <label class="form-label">Batch Schedule</label>
                            <div class="d-flex gap-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="scheduleType" id="dateRange" value="dateRange" checked onchange="toggleScheduleFields()">
                                    <label class="form-check-label" for="dateRange">
                                        Date Range
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="scheduleType" id="everyday" value="everyday" onchange="toggleScheduleFields()">
                                    <label class="form-check-label" for="everyday">
                                        Everyday
                                    </label>
                                </div>
                            </div>
                        </div>
                        
                        <div id="dateFields">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Start Date</label>
                                    <input type="date" onchange="validateDates()" class="form-control" name="start_time" id="startDate" required>
                                    <div class="invalid-feedback" id="startDateError"></div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">End Date</label>
                                    <input type="date" onchange="validateDates()" class="form-control" name="end_time" id="endDate" required>
                                    <div class="invalid-feedback" id="endDateError"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="info-section state-section">
                                        <div class="info-title">
                                            <i class="fas fa-map-marker-alt"></i>
                                            Active States (<span></span>)
                                        </div>
                                        <div class="tag-container state-tags"></div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="info-section charge-section">
                                        <div class="info-title">
                                            <i class="fas fa-bolt"></i>
                                            Active Charges (<span></span>)
                                        </div>
                                        <div class="tag-container charge-tags"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div>
                            <small class="form-text text-muted">
                                Batch will be created for Active States & Active Charges only.
                            </small>
                        </div>
                        <div>
                            <small class="form-text text-muted">
                                Script will run according to state priority.
                            </small>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-custom" onclick="addBatch()">Add Batch</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    const allStates = [];
    const allCharges = [];
    const activeCharges = [];
    const activeStates = [];
    $(document).ready(() => {
        $.get('/api/charges').done(data => {
            data.forEach(charge => {
                allCharges.push(charge);
                if(charge.status == 1){
                    activeCharges.push(charge);
                }
            });
            $('.charge-section .info-title span').html(activeCharges.length);
            $('.charge-section .charge-tags').html(activeCharges.map(charge => `<span class="tag charge-tag">${charge.name}</span>`).join(''));
            
        });
        $.get('/api/states').done(data => {
            data.forEach(state => {
                allStates.push(state);
                if(state.status == 1){
                    activeStates.push(state);
                }
            });
            $('.state-section .info-title span').html(activeStates.length);
            $('.state-section .state-tags').html(activeStates.map(state => `<span class="tag">${state.name}</span>`).join(''));
        });
        loadBatches();
    });
    
    // Mock data for demonstration
    const mockBatches = [
        {
            id: 1,
            start_time: '2024-01-15',
            end_time: '2024-01-20',
            charges: '["1001", "1002", "1003", "1004"]',
            states: '["NY", "CA", "TX", "FL"]',
            status: 'active',
            script_status: 'processing',
            processing_charge_id: 1002,
            processing_state_id: 2,
            processing_date: '2024-01-15 14:30:00',
            worker_id: 101,
            schedule_type: 'dateRange'
        },
        {
            id: 2,
            start_time: '',
            end_time: '',
            charges: '["2001", "2002"]',
            states: '["IL", "OH"]',
            status: 'active',
            script_status: 'completed',
            processing_charge_id: null,
            processing_state_id: null,
            processing_date: '2024-01-14 15:45:00',
            worker_id: 102,
            schedule_type: 'everyday'
        },
        {
            id: 3,
            start_time: '2024-01-10',
            end_time: '2024-01-16',
            charges: '["3001", "3002", "3003"]',
            states: '["WA", "OR"]',
            status: 'active',
            script_status: 'pending',
            processing_charge_id: null,
            processing_state_id: null,
            processing_date: null,
            worker_id: 103,
            schedule_type: 'dateRange'
        }
    ];


    function loadStats() {
        $.get('/api/batches/stats').done(data => {
            const statsContainer = document.getElementById('statsContainer');
            statsContainer.innerHTML = `
                <div class="stat-card fade-in">
                    <div class="stat-number">${data.total_batches}</div>
                    <div class="stat-label">Total Batches</div>
                </div>
                <div class="stat-card fade-in">
                    <div class="stat-number">${data.status_breakdown.active}</div>
                    <div class="stat-label">Active Batches</div>
                </div>
                <div class="stat-card fade-in">
                    <div class="stat-number">${data.script_status_breakdown.processing}</div>
                    <div class="stat-label">Processing</div>
                </div>
                <div class="stat-card fade-in">
                    <div class="stat-number">${data.script_status_breakdown.completed}</div>
                    <div class="stat-label">Completed</div>
                </div>
            `;
        });
    }

    function loadBatches() {
        loadStats();
        const loading = document.getElementById('loading');
        const container = document.getElementById('batchContainer');
        
        loading.style.display = 'block';
        container.innerHTML = '';
        const batches = [];

        $.get('/api/batches').done(data => {
            data.data.forEach(batch => {
                const charges = JSON.parse(batch.charges);
                const states = JSON.parse(batch.states);
                batches.push({
                    id: batch.id,
                    start_time: batch.start_time,
                    end_time: batch.end_time,
                    charges: allCharges.filter(state => charges.includes(state.id)).map(state => state.name),
                    states: allStates.filter(state => states.includes(state.id)).map(state => state.name),
                    status: batch.status,
                    script_status: batch.script_status,
                    processing_charge_id: batch.processing_charge_id,
                    processing_state_id: batch.processing_state_id,
                    processing_date: batch.processing_date,
                    worker_id: batch.worker_id,
                    schedule_type: batch.start_time == ''? 'everyday' : 'dateRange'
                });
            });
            loading.style.display = 'none';
            renderBatches(batches);
        });
    }

    function renderBatches(batches) {
        const container = document.getElementById('batchContainer');
        container.innerHTML = '';

        batches.forEach((batch, index) => {
            const charges = batch.charges;
            const states = batch.states;
            const totalRecords = charges.length + states.length;

            const batchCard = document.createElement('div');
            batchCard.className = 'batch-card fade-in';
            batchCard.style.animationDelay = `${index * 0.1}s`;
            
            batchCard.innerHTML = `
                <div class="batch-header">
                    <h2 class="batch-id">Batch #${batch.id}</h2>
                    <div class="status-toggle">
                        <div class="toggle-switch ${batch.status}" onclick="toggleStatus(${batch.id}, '${batch.status}')">
                            <div class="toggle-slider"></div>
                        </div>
                    </div>
                </div>
                <div class="batch-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="info-section">
                                <div class="info-title">
                                    <i class="fas fa-map-marker-alt"></i>
                                    States (${states.length})
                                </div>
                                <div class="tag-container">
                                    ${states.map(state => `<span class="tag">${state}</span>`).join('')}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-section">
                                <div class="info-title">
                                    <i class="fas fa-bolt"></i>
                                    Charges (${charges.length})
                                </div>
                                <div class="tag-container">
                                    ${charges.map(charge => `<span class="tag charge-tag">${charge}</span>`).join('')}
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    ${batch.processing_charge_id || batch.processing_state_id ? `
                    <div class="processing-info">
                        <div class="row">
                            <div class="col-md-6">
                                <strong><i class="fas fa-cog me-2"></i>Processing Charge:</strong><br>
                                ${batch.processing_charge_id || 'None'}
                            </div>
                            <div class="col-md-6">
                                <strong><i class="fas fa-location-arrow me-2"></i>Processing State:</strong><br>
                                ${batch.processing_state_id ? states[batch.processing_state_id - 1] || 'Unknown' : 'None'}
                            </div>
                        </div>
                    </div>
                    ` : ''}
                    
                    <div class="row mt-3">
                        <div class="col-md-3">
                            <strong>Schedule:</strong><br>
                            <span class="badge bg-info">${batch.schedule_type === 'everyday' ? 'EVERYDAY' : 'DATE RANGE'}</span>
                        </div>
                        <div class="col-md-3">
                            <strong>Script Status:</strong><br>
                            <span class="badge bg-${getStatusColor(batch.script_status)}">${batch.script_status.toUpperCase()}</span>
                        </div>
                        <div class="col-md-3">
                            <strong>Total Records:</strong><br>
                            <span class="text-primary fw-bold">${totalRecords}</span>
                        </div>
                        <div class="col-md-3">
                            <strong>Started:</strong><br>
                            ${batch.start_time ? new Date(batch.start_time).toLocaleDateString() : batch.schedule_type === 'everyday' ? 'Everyday' : 'Not started'}
                        </div>
                    </div>
                    

                </div>
            `;
            
            container.appendChild(batchCard);
        });
    }

    function getStatusColor(status) {
        switch(status) {
            case 'completed': return 'success';
            case 'processing': return 'warning';
            case 'pending': return 'secondary';
            default: return 'primary';
        }
    }

    function toggleStatus(batchId, currentStatus) {
        const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
        
        // Find batch and update status
        const batch = mockBatches.find(b => b.id === batchId);
        if (batch) {
            batch.status = newStatus;
            
            // Update the toggle switch
            const toggle = event.target.classList.contains('toggle-switch') ? 
                          event.target : event.target.parentElement;
            toggle.className = `toggle-switch ${newStatus}`;
            
            // Show success message
            showToast(`Batch #${batchId} status changed to ${newStatus}`, 'success');
        }
    }

    function showAddBatchModal() {
        const modal = new bootstrap.Modal(document.getElementById('addBatchModal'));
        modal.show();
    }

    function addBatch() {
        const form = document.getElementById('addBatchForm');
        
        // Validate dates before proceeding
        if (!validateDates()) {
            return;
        }
        
        const formData = new FormData(form);
        const scheduleType = formData.get('scheduleType');
        
        // Convert form data to object
        const newBatch = {
            start_time: scheduleType === 'everyday' ? '' : formData.get('start_time'),
            end_time: scheduleType === 'everyday' ? '' : formData.get('end_time'),
            charges: JSON.stringify(activeCharges.map(item => item.id)), // Default charges
            states: JSON.stringify(activeStates.map(item => item.id)),
        };
        debugger;
        $.post('/api/batches', newBatch).done(data => {
            loadBatches();
            // Close modal and reset form
            bootstrap.Modal.getInstance(document.getElementById('addBatchModal')).hide();
            form.reset();
            
            // Reset to default state (date range)
            document.getElementById('dateRange').checked = true;
            toggleScheduleFields();
            
            const scheduleText = scheduleType === 'everyday' ? 'everyday schedule' : 'date range';
            showToast(`New batch with ${scheduleText} added successfully!`, 'success');
        });
    }

    function toggleScheduleFields() {
        const dateFields = document.getElementById('dateFields');
        const scheduleType = document.querySelector('input[name="scheduleType"]:checked').value;
        
        if (scheduleType === 'everyday') {
            dateFields.style.display = 'none';
            // Remove required attribute when hidden
            document.getElementById('startDate').removeAttribute('required');
            document.getElementById('endDate').removeAttribute('required');
        } else {
            dateFields.style.display = 'block';
            // Add required attribute when visible
            document.getElementById('startDate').setAttribute('required', 'required');
            document.getElementById('endDate').setAttribute('required', 'required');
        }
        
        // Clear any previous validation errors
        clearValidationErrors();
    }

    function validateDates() {
        const startDate = document.getElementById('startDate');
        const endDate = document.getElementById('endDate');
        const startDateError = document.getElementById('startDateError');
        const endDateError = document.getElementById('endDateError');
        const scheduleType = document.querySelector('input[name="scheduleType"]:checked').value;
        
        // Clear previous errors
        clearValidationErrors();
        
        // Skip validation for everyday option
        if (scheduleType === 'everyday') {
            return true;
        }
        
        const today = new Date();
        today.setHours(0, 0, 0, 0); // Set to start of day
        
        const startDateValue = new Date(startDate.value);
        const endDateValue = new Date(endDate.value);
        
        let isValid = true;
        
        // Check if start date is provided
        if (!startDate.value) {
            showFieldError(startDate, startDateError, 'Start date is required');
            isValid = false;
        }
        
        // Check if end date is provided
        if (!endDate.value) {
            showFieldError(endDate, endDateError, 'End date is required');
            isValid = false;
        }
        
        if (startDate.value && endDate.value) {
            // Check if start date is older than end date
            if (startDateValue >= endDateValue) {
                showFieldError(startDate, startDateError, 'Start date must be earlier than end date');
                isValid = false;
            }
            
            // Check if end date is less than today
            if (endDateValue >= today) {
                showFieldError(endDate, endDateError, 'End date must be before today');
                isValid = false;
            }
        }
        
        return isValid;
    }

    function showFieldError(field, errorElement, message) {
        field.classList.add('is-invalid');
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }

    function clearValidationErrors() {
        const fields = ['startDate', 'endDate'];
        const errors = ['startDateError', 'endDateError'];
        
        fields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            field.classList.remove('is-invalid');
        });
        
        errors.forEach(errorId => {
            const error = document.getElementById(errorId);
            error.textContent = '';
            error.style.display = 'none';
        });
    }

    function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `alert alert-${type} position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'} me-2"></i>
                ${message}
            </div>
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    $('#toggleBtn').click(function() {
        const btn = $(this);
        if (btn.data('status') === 'started') {
            // Switch to Stop
            btn.data('status', 'stopped');
            btn.html('<i class="fas fa-stop"></i> Stopped');
            btn.removeClass('active').addClass('inactive');
            // Send start command to server
            // fetch('/start', { method: 'POST' });
        } else {
            // Switch to Start
            btn.data('status', 'started');
            btn.html('<i class="fas fa-play"></i> Running');
            btn.removeClass('inactive').addClass('active');
            // Send stop command to server
            // fetch('/stop', { method: 'POST' });
        }
    });

    // Refresh stats function
    async function refreshStats() {
        try {
            const response = await fetch('/api/stats');
            const data = await response.json();
            
            document.getElementById('totalRecords').textContent = data.totalRecords.toLocaleString();
            document.getElementById('lastUpdate').textContent = new Date().toLocaleString();
        } catch (error) {
            console.error('Error refreshing stats:', error);
        }
        loadStats();
    }

    // Auto-refresh stats every 30 seconds
    setInterval(refreshStats, 30000);

</script>
</body>
</html>